version: "2.4"

services:
  db:
    image: "postgres"
    restart: always
    container_name: postgres-test
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: test
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "test" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared-network

  users-api:
    container_name: users-api 
    environment:
      POSTGRES_HOST: postgres-test:5432
    image: users-api
    command: ./users-api 
    ports:
      - 8000:8000 # CRUD API
    networks:
      - shared-network
    depends_on:
      - db
      - zookeeper
      - kafka1

  visits-api:
    container_name: visits-api 
    environment:
      POSTGRES_HOST: postgres-test:5432
      KAFKA_BROKERS: "kafka1:19091"
    image: visits-api
    command: ./visits-api 
    ports:
      - 8001:8001 # CRUD API
    networks:
      - shared-network
    depends_on:
      - db
      - zookeeper
      - kafka1

  zookeeper:
    container_name: zookeeper
    restart: always
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog
    networks:
      - shared-network

  kafka1:
    container_name: kafka1
    restart: always
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - shared-network
  kafdrop:
    container_name: kafdrop
    restart: always
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19091"
    depends_on:
      - kafka1
    networks:
      - shared-network

  redis:
    image: redis:6-alpine
    restart: always
    container_name: user_redis
    ports:
      - "6379:6379"
    networks:
      - shared-network

networks:
  shared-network:
    driver: bridge
