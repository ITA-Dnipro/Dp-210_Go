// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/ITA-Dnipro/Dp-210_Go/appointment/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAppointmentsRepository is a mock of AppointmentsRepository interface.
type MockAppointmentsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentsRepositoryMockRecorder
}

// MockAppointmentsRepositoryMockRecorder is the mock recorder for MockAppointmentsRepository.
type MockAppointmentsRepositoryMockRecorder struct {
	mock *MockAppointmentsRepository
}

// NewMockAppointmentsRepository creates a new mock instance.
func NewMockAppointmentsRepository(ctrl *gomock.Controller) *MockAppointmentsRepository {
	mock := &MockAppointmentsRepository{ctrl: ctrl}
	mock.recorder = &MockAppointmentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentsRepository) EXPECT() *MockAppointmentsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAppointmentsRepository) Create(ctx context.Context, a *entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAppointmentsRepositoryMockRecorder) Create(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppointmentsRepository)(nil).Create), ctx, a)
}

// Delete mocks base method.
func (m *MockAppointmentsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppointmentsRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppointmentsRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockAppointmentsRepository) GetAll(ctx context.Context, p *entity.AppointmentsParam) ([]entity.Appointment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, p)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAppointmentsRepositoryMockRecorder) GetAll(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAppointmentsRepository)(nil).GetAll), ctx, p)
}

// GetByDoctorID mocks base method.
func (m *MockAppointmentsRepository) GetByDoctorID(ctx context.Context, id uuid.UUID, p *entity.AppointmentsParam) ([]entity.Appointment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDoctorID", ctx, id, p)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByDoctorID indicates an expected call of GetByDoctorID.
func (mr *MockAppointmentsRepositoryMockRecorder) GetByDoctorID(ctx, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDoctorID", reflect.TypeOf((*MockAppointmentsRepository)(nil).GetByDoctorID), ctx, id, p)
}

// GetByID mocks base method.
func (m *MockAppointmentsRepository) GetByID(ctx context.Context, id uuid.UUID) (entity.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAppointmentsRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAppointmentsRepository)(nil).GetByID), ctx, id)
}

// GetByPatientID mocks base method.
func (m *MockAppointmentsRepository) GetByPatientID(ctx context.Context, id uuid.UUID, p *entity.AppointmentsParam) ([]entity.Appointment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPatientID", ctx, id, p)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByPatientID indicates an expected call of GetByPatientID.
func (mr *MockAppointmentsRepositoryMockRecorder) GetByPatientID(ctx, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPatientID", reflect.TypeOf((*MockAppointmentsRepository)(nil).GetByPatientID), ctx, id, p)
}

// Update mocks base method.
func (m *MockAppointmentsRepository) Update(ctx context.Context, a *entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAppointmentsRepositoryMockRecorder) Update(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAppointmentsRepository)(nil).Update), ctx, a)
}

// MockDoctorsClient is a mock of DoctorsClient interface.
type MockDoctorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorsClientMockRecorder
}

// MockDoctorsClientMockRecorder is the mock recorder for MockDoctorsClient.
type MockDoctorsClientMockRecorder struct {
	mock *MockDoctorsClient
}

// NewMockDoctorsClient creates a new mock instance.
func NewMockDoctorsClient(ctrl *gomock.Controller) *MockDoctorsClient {
	mock := &MockDoctorsClient{ctrl: ctrl}
	mock.recorder = &MockDoctorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctorsClient) EXPECT() *MockDoctorsClientMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockDoctorsClient) GetByID(ctx context.Context, id uuid.UUID) (entity.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDoctorsClientMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDoctorsClient)(nil).GetByID), ctx, id)
}

// MockUsersClient is a mock of UsersClient interface.
type MockUsersClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersClientMockRecorder
}

// MockUsersClientMockRecorder is the mock recorder for MockUsersClient.
type MockUsersClientMockRecorder struct {
	mock *MockUsersClient
}

// NewMockUsersClient creates a new mock instance.
func NewMockUsersClient(ctrl *gomock.Controller) *MockUsersClient {
	mock := &MockUsersClient{ctrl: ctrl}
	mock.recorder = &MockUsersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersClient) EXPECT() *MockUsersClientMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUsersClient) GetByID(ctx context.Context, id uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersClientMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersClient)(nil).GetByID), ctx, id)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// SendAppointment mocks base method.
func (m *MockProducer) SendAppointment(a *entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppointment", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppointment indicates an expected call of SendAppointment.
func (mr *MockProducerMockRecorder) SendAppointment(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppointment", reflect.TypeOf((*MockProducer)(nil).SendAppointment), a)
}

// SendBill mocks base method.
func (m *MockProducer) SendBill(b entity.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBill", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBill indicates an expected call of SendBill.
func (mr *MockProducerMockRecorder) SendBill(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBill", reflect.TypeOf((*MockProducer)(nil).SendBill), b)
}

// SendNotification mocks base method.
func (m *MockProducer) SendNotification(n interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", n)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockProducerMockRecorder) SendNotification(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockProducer)(nil).SendNotification), n)
}
