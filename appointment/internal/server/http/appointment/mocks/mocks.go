// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/ITA-Dnipro/Dp-210_Go/appointment/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(ctx context.Context, a *entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), ctx, a)
}

// CreateRequest mocks base method.
func (m *MockUsecase) CreateRequest(ctx context.Context, a *entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockUsecaseMockRecorder) CreateRequest(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockUsecase)(nil).CreateRequest), ctx, a)
}

// Delete mocks base method.
func (m *MockUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsecaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsecase)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockUsecase) GetAll(ctx context.Context, p *entity.AppointmentsParam) ([]entity.Appointment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, p)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUsecaseMockRecorder) GetAll(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsecase)(nil).GetAll), ctx, p)
}

// GetByDoctorID mocks base method.
func (m *MockUsecase) GetByDoctorID(ctx context.Context, id uuid.UUID, p *entity.AppointmentsParam) ([]entity.Appointment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDoctorID", ctx, id, p)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByDoctorID indicates an expected call of GetByDoctorID.
func (mr *MockUsecaseMockRecorder) GetByDoctorID(ctx, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDoctorID", reflect.TypeOf((*MockUsecase)(nil).GetByDoctorID), ctx, id, p)
}

// GetByID mocks base method.
func (m *MockUsecase) GetByID(ctx context.Context, id uuid.UUID) (entity.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsecaseMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsecase)(nil).GetByID), ctx, id)
}

// GetByPatientID mocks base method.
func (m *MockUsecase) GetByPatientID(ctx context.Context, id uuid.UUID, p *entity.AppointmentsParam) ([]entity.Appointment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPatientID", ctx, id, p)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByPatientID indicates an expected call of GetByPatientID.
func (mr *MockUsecaseMockRecorder) GetByPatientID(ctx, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPatientID", reflect.TypeOf((*MockUsecase)(nil).GetByPatientID), ctx, id, p)
}

// SendResult mocks base method.
func (m *MockUsecase) SendResult(ctx context.Context, v *entity.Visit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResult", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResult indicates an expected call of SendResult.
func (mr *MockUsecaseMockRecorder) SendResult(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResult", reflect.TypeOf((*MockUsecase)(nil).SendResult), ctx, v)
}

// Update mocks base method.
func (m *MockUsecase) Update(ctx context.Context, a *entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsecaseMockRecorder) Update(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), ctx, a)
}
